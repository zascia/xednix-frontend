// src/components/Dashboard.jsx
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import ProfileSetupWizard from './ProfileSetupWizard';
import SearchDashboard from './SearchDashboard';

const Dashboard = ({ accessToken, onLogout }) => {
    const [dashboardData, setDashboardData] = useState('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    const [resources, setResources] = useState([]);
    const [selectedResources, setSelectedResources] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [profileMode, setProfileMode] = useState('CHOICE');
    const [userProfile, setUserProfile] = useState(null);


    // –ò—Å–ø–æ–ª—å–∑—É–µ–º useCallback –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    const fetchDashboardData = useCallback(async () => {
        const controller = new AbortController();
        const signal = controller.signal;

        // --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
        const fetchData = async () => {
            // 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –î–∞—à–±–æ—Ä–¥–∞
            try {
                const dashResponse = await axios.get('http://127.0.0.1:5000/dashboard', {
                    headers: { Authorization: `Bearer ${accessToken}` },
                    signal: signal
                });
                setDashboardData(dashResponse.data.message);
            } catch (error) {
                if (!axios.isCancel(error) && error.response && error.response.status === 401) {
                    console.error("Token invalid or expired. Logging out.");
                    onLogout();
                }
                // –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
                setDashboardData('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞.');
            }

            // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –†–µ—Å—É—Ä—Å–æ–≤ (–í–¢–û–†–û–ô –ó–ê–ü–†–û–°)
            try {
                const resResponse = await axios.get('http://127.0.0.1:5000/api/resources', {
                    headers: { Authorization: `Bearer ${accessToken}` },
                    signal: signal
                });
                setResources(resResponse.data);
            } catch (error) {
                if (!axios.isCancel(error) && error.response && error.response.status === 401) {
                    console.error("Resource fetch failed. Token invalid. Logging out.");
                    onLogout();
                }
                console.error("Error loading resources:", error);
                // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                setResources([{ id: 0, name: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤', is_active: false }]);
            }

            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –ü—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¢–†–ï–¢–ò–ô –ó–ê–ü–†–û–°)
            try {
                const profileResponse = await axios.get('http://127.0.0.1:5000/api/profile', {
                    headers: { Authorization: `Bearer ${accessToken}` },
                    signal: signal
                });

                const profileData = profileResponse.data;

                // üîë –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ä–æ–ª—å
                if (profileData.target_role) {
                    // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ—Å–ª–µ –°–ª–µ–ø–æ–≥–æ –ø–æ–∏—Å–∫–∞), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º SEARCH
                    setUserProfile(profileData);
                    setProfileMode('SEARCH');
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞
                    if (profileData.target_role) {
                        setSearchTerm(profileData.target_role);
                    }

                } else {
                    // –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    setProfileMode('CHOICE');
                }

            } catch (error) {
                // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º CHOICE
                if (error.response && error.response.status === 404) {
                    setProfileMode('CHOICE');
                } else if (error.response && error.response.status === 401) {
                    onLogout();
                } else {
                    console.error("Error loading profile:", error);
                    // –ï—Å–ª–∏ –±—ã–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º CHOICE
                    setProfileMode('CHOICE');
                }
            }
        };

        fetchData();

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        return () => {
            controller.abort();
        };
    }, [accessToken, onLogout]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    useEffect(() => {
        fetchDashboardData();
    }, [fetchDashboardData]);

    const handleResourceToggle = (resourceId) => {
        setSelectedResources(prev =>
            prev.includes(resourceId)
                ? prev.filter(id => id !== resourceId)
                : [...prev, resourceId]
        );
    };

    // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã, –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Ö –Ω–∞ –≤–∞—à –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –±—ç–∫–µ–Ω–¥-–º–∞—Ä—à—Ä—É—Ç /api/search –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    const handleSearch = async (e) => {
        // 1. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        e.preventDefault();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        let finalSearchTerm = searchTerm.trim();

        // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ä–æ–ª—å, –µ—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ
        if (!finalSearchTerm && userProfile && userProfile.target_role) {
            finalSearchTerm = userProfile.target_role;
        }

        if (!finalSearchTerm || selectedResources.length === 0) {
            alert("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.");
            return;
        }

        // 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π: –Ω–∞—á–∞–ª–æ
        setIsLoading(true);
        setSearchResults([]);

        try {
            // 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
            const response = await axios.post('http://127.0.0.1:5000/api/search', {
                searchTerm: finalSearchTerm,
                resourceIds: selectedResources,
                // 2. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ö–ê–¶–ò–Æ –ò –£–†–û–í–ï–ù–¨ –ù–ê –ë–≠–ö–ï–ù–î –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                location: userProfile?.location || null,
                level: userProfile?.target_level || null

            },{
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });

            // 5. –£—Å–ø–µ—Ö
            setSearchResults(response.data);
            console.log("Search complete. Results received:", response.data.length);

        } catch (error) {
            // 6. –û—à–∏–±–∫–∞
            console.error('Search API Error:', error);
            // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            setSearchResults([{ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ª–æ–≥ —Å–µ—Ä–≤–µ—Ä–∞.' }]);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
            if (error.response && error.response.status === 401) {
                onLogout();
            }

        } finally {
            // 7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            setIsLoading(false);
        }
    };

    // --- –§–£–ù–ö–¶–ò–Ø –°–ë–†–û–°–ê –ü–†–û–§–ò–õ–Ø (–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ SEARCH) ---
    const handleProfileReset = () => {
        // 1. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
        setProfileMode('CHOICE');
        setUserProfile(null);
        setSearchTerm('');
        setSearchResults([]);

        // 2. –í –±—É–¥—É—â–µ–º: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ DB.
        console.log("Profile reset locally. User is back to choice selection.");
    };

    // –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –î–∞—à–±–æ—Ä–¥–µ
    const handleProfileUpdate = (profileData) => {
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ userProfile
        setUserProfile(profileData);
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if (profileData.target_role) {
            setSearchTerm(profileData.target_role);
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    const isSetupMode = profileMode !== 'SEARCH';

    return (
        <div style={{ padding: '40px', textAlign: 'center' }}>
            <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Xednix</h1>
            <p style={{ fontSize: '1.2em', color: 'darkgreen' }}>{dashboardData}</p>

            <button
                onClick={onLogout}
                style={{ marginTop: '20px', padding: '10px 20px', backgroundColor: 'red', color: 'white', border: 'none', cursor: 'pointer' }}
            >
                –í—ã—Ö–æ–¥
            </button>

            {/* –ì–õ–ê–í–ù–û–ï –£–°–õ–û–í–ò–ï: –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø –ò–õ–ò –†–ï–ñ–ò–ú –ü–û–ò–°–ö–ê */}
            {isSetupMode ? (
                // 1. –ï—Å–ª–∏ –∏–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–∏–∑–∞—Ä–¥
                <ProfileSetupWizard
                    profileMode={profileMode}
                    setProfileMode={setProfileMode}
                    accessToken={accessToken}
                    onProfileUpdate={handleProfileUpdate}
                />
            ) : (
                // 2. –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω (profileMode === 'SEARCH'), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
                <SearchDashboard
                    resources={resources}
                    selectedResources={selectedResources}
                    searchTerm={searchTerm}
                    setSearchTerm={setSearchTerm}
                    searchResults={searchResults}
                    isLoading={isLoading}
                    userProfile={userProfile}
                    handleSearch={handleSearch}
                    handleResourceToggle={handleResourceToggle}
                    handleProfileReset={handleProfileReset} // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞
                />
            )}
        </div>
    );
};

export default Dashboard;